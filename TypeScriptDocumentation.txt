Left Off: 3:19:46

tsc filename.ts --> Runs the typescript file
tsc --init      --> Creates a simple TS config file
tsc -w          --> Eneters watch mode to check for any changes (puts dist index.js into strict mode) --> Press CONTROL + C to exit

npm init -y     --> Sets up package.json (-y so it doesn't ask you a question)
npm i lite-server   --> An alternative to live-server
                    --> Need to use "start": "lite-server" in the package.json file and then use npm start

mkdir src dist  --> In production we make the directories src and dist (src for writing code, dist for production to be served to end user)

// "outDir": "./",                                   /* Specify an output folder for all emitted files. */
--> If we uncomment this out from the tsconfig.json file we can replace it with
    --> "outDir": "./dist",  
        --> Tell us where the output of this file will be
            --> Scans the entire directory and search for whatever .ts file it can find

/-----------------------------------------------------------------------------------------------------------------------------------------------/

TypeScript

Types:
    Numbers:
        All numbers in TypeScript are either floating point values or BigIntegers. 
        These floating point numbers get the type number, while BigIntegers get the type bigint

    Strings:
        We use the type string to refer to these textual datatypes. 
        Just like JavaScript, TypeScript also uses double quotes (") or single quotes (') to surround string data.

        You can also use template strings, which can span multiple lines and have embedded expressions. 
        These strings are surrounded by the backtick/backquote (`) character, and embedded expressions are of the form ${ expr }

    Booleans:
        The most basic datatype is the simple true/false value, which JavaScript and TypeScript call a boolean value.

    Null & Undefined:
        In TypeScript, both undefined and null actually have their types named undefined and null respectively. 
        Much like void, they’re not extremely useful on their own

    Void:
        void is a little like the opposite of any: the absence of having any type at all. 
        You may commonly see this as the return type of functions that do not return a value

    Object:
        object is a type that represents the non-primitive type, 
        i.e. anything that is not number, string, boolean, bigint, symbol, null, or undefined.

With object type, APIs like Object.create can be better represented
    Array:
        Array types can be written in one of two ways. 
        In the first, you use the type of the elements followed by [] to denote an array of that element type.

        The second way uses a generic array type, Array<elemType>

    Tuples:
        Tuple types allow you to express an array with a fixed number of elements whose types are known, but need not be the same. 
        For example, you may want to represent a value as a pair of a string and a number

    Enum:
        A helpful addition to the standard set of datatypes from JavaScript is the enum. 
        As in languages like C#, an enum is a way of giving more friendly names to sets of numeric values

        By default, enums begin numbering their members starting at 0. 
        You can change this by manually setting the value of one of its members. 
        For example, we can start the previous example at 1 instead of 0

    Unknown:
        We may need to describe the type of variables that we do not know when we are writing an application. 
        These values may come from dynamic content – e.g. from the user – or we may want to intentionally accept all values in our API. 
        In these cases, we want to provide a type that tells the compiler and future readers that this variable could be anything, 
        so we give it the unknown type

    Any:
        In some situations, not all type information is available or its declaration would take an inappropriate amount of effort. 
        These may occur for values from code that has been written without TypeScript or a 3rd party library. 
        In these cases, we might want to opt-out of type checking. To do so, we label these values with the any type

        Essentially making the code more vulnerable (like coding in base JS)

    Never:
        The never type represents the type of values that never occur. For instance, never is the return type for a function expression 
        or an arrow function expression that always throws an exception or one that never returns. Variables also acquire the type never 
        when narrowed by any type guards that can never be true.
        
        The never type is a subtype of, and assignable to, every type; however, no type is a subtype of, 
        or assignable to, never (except never itself). Even any isn’t assignable to never

    Type Assertions:
        Sometimes you’ll end up in a situation where you’ll know more about a value than TypeScript does. 
        Usually, this will happen when you know the type of some entity could be more specific than its current type.

        Type assertions are a way to tell the compiler “trust me, I know what I’m doing.” 
        A type assertion is like a type cast in other languages, but it performs no special checking or restructuring of data. 
        It has no runtime impact and is used purely by the compiler. 
        TypeScript assumes that you, the programmer, have performed any special checks that you need.
        
        Type assertions have two forms
            One is the as-syntax
            The other version is the “angle-bracket” syntax